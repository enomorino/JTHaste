let dataVeronica = [
  [0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0],
  [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0],
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0],
  [0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
  [0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0],
  [0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
];

let dataNina = [
  [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3],
  [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3],
  [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3],
  [3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0],
  [0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0],
  [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
];

const size = 4;

function draw() {
  background(255);
  noStroke();
  push();
  translate(300, 225);
  for (let y in dataVeronica) {
    for (let x in dataVeronica[y]) {
      let pixel = dataVeronica[y][x];
      if (pixel === 1) {
        fill("black");
        rect(x * size, y * size, size, size);
      } else if (pixel === 2) {
        fill(95, 56, 23);
        rect(x * size, y * size, size, size);
      } else if (pixel === 3) {
        fill(221, 180, 153);
        rect(x * size, y * size, size, size);
      }
    }
  }
  pop();

  push();
  translate(200, 225);
  for (let y in dataNina) {
    for (let x in dataNina[y]) {
      let pixel = dataNina[y][x];
      if (pixel === 1) {
        fill("black");
        rect(x * size, y * size, size, size);
      } else if (pixel === 2) {
        fill(35, 1, 2);
        rect(x * size, y * size, size, size);
      } else if (pixel === 3) {
        fill(1, 73, 45);
        rect(x * size, y * size, size, size);
      } else if (pixel === 4) {
        fill(40, 40, 40);
        rect(x * size, y * size, size, size);
      }
    }
  }
  pop();
}
